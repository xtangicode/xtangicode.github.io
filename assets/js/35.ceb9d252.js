(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{418:function(r,e,t){r.exports=t.p+"assets/img/docker_jg01.f482b65e.png"},556:function(r,e,t){"use strict";t.r(e);var c=t(14),o=Object(c.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[r._v("#")]),r._v(" 概述")]),r._v(" "),e("blockquote",[e("p",[r._v("Docker使用客户端-服务器架构。Docker客户端与Docker守护进程进行对话，该守护进程完成了构建，运行和分发Docker容器的繁重工作。Docker客户端和守护程序可以 在同一系统上运行，或者您可以将Docker客户端连接到远程Docker守护程序。Docker客户端和守护程序在UNIX套接字或网络接口上使用REST API进行通信。另一个Docker客户端是Docker Compose，它使您可以处理由一组容器组成的应用程序。")])]),r._v(" "),e("p",[e("img",{attrs:{src:t(418),alt:""}})]),r._v(" "),e("h2",{attrs:{id:"docker守护程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker守护程序"}},[r._v("#")]),r._v(" Docker守护程序")]),r._v(" "),e("p",[r._v("Docker守护程序（dockerd）侦听Docker API请求并管理Docker对象，例如图像，容器，网络和卷。守护程序还可以与其他守护程序通信以管理Docker服务。")]),r._v(" "),e("h2",{attrs:{id:"docker客户端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker客户端"}},[r._v("#")]),r._v(" Docker客户端")]),r._v(" "),e("p",[r._v("Docker客户端（docker）是许多Docker用户与Docker交互的主要方式。当您使用诸如之类的命令时docker run，客户端会将这些命令发送到dockerd，以执行这些命令。该docker命令使用Docker API。Docker客户端可以与多个守护程序通信。")]),r._v(" "),e("h2",{attrs:{id:"docker-registries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-registries"}},[r._v("#")]),r._v(" Docker registries")]),r._v(" "),e("p",[r._v("Docker registries存储Docker镜像。Docker Hub是任何人都可以使用的公共registries，并且默认情况下，Docker已配置为在Docker Hub上查找镜像。您甚至可以运行自己的私人registries。")]),r._v(" "),e("p",[r._v("使用docker pull或docker run命令时，将从配置的registries中提取所需的图像。使用该docker push命令时，会将镜像推送到已配置的注册表。")]),r._v(" "),e("h2",{attrs:{id:"docker对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker对象"}},[r._v("#")]),r._v(" Docker对象")]),r._v(" "),e("p",[r._v("使用Docker时，您正在创建和使用镜像，容器，网络，卷，插件和其他对象。本节是其中一些对象的简要概述。")]),r._v(" "),e("h3",{attrs:{id:"镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[r._v("#")]),r._v(" 镜像")]),r._v(" "),e("p",[r._v("一个图像是用于创建一个码头工人容器指令的只读模板。通常，一个镜像基于另一个镜像，并进行一些其他自定义。例如，您可以基于该ubuntu 镜像构建镜像，但安装Apache Web服务器和您的应用程序，以及运行该应用程序所需的配置详细信息。")]),r._v(" "),e("p",[r._v("您可以创建自己的图像，也可以仅使用其他人创建并在注册表中发布的图像。要构建自己的镜像，您可以 使用简单的语法创建一个Dockerfile，以定义创建镜像并运行它所需的步骤。Dockerfile中的每条指令都会在镜像中创建一个层。当您更改Dockerfile并重建镜像时，仅重建那些已更改的层。与其他虚拟化技术相比，这是使镜像如此轻巧，小型和快速的部分原因。")]),r._v(" "),e("h3",{attrs:{id:"容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[r._v("#")]),r._v(" 容器")]),r._v(" "),e("p",[r._v("容器是图像的可运行实例。您可以使用Docker API或CLI创建，启动，停止，移动或删除容器。您可以将容器连接到一个或多个网络，将存储连接到它，甚至根据其当前状态创建一个新镜像。")]),r._v(" "),e("p",[r._v("默认情况下，容器与其他容器及其主机之间的隔离度相对较高。您可以控制容器的网络，存储或其他底层子系统与其他容器或与主机的隔离程度。")])])}),[],!1,null,null,null);e.default=o.exports}}]);